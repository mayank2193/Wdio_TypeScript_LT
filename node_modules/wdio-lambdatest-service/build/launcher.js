"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _perf_hooks = require("perf_hooks");

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _nodeTunnel = _interopRequireDefault(require("@lambdatest/node-tunnel"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const log = (0, _logger.default)('@wdio/lambdatest-service');

class LambdaTestLauncher {
  constructor(options) {
    this.options = options;
  }

  onPrepare(config, capabilities) {
    if (!this.options.tunnel) {
      return;
    }

    const tunnelArguments = _objectSpread({
      user: config.user,
      key: config.key
    }, this.options.lambdatestOpts);

    this.lambdatestTunnelProcess = new _nodeTunnel.default();

    if (Array.isArray(capabilities)) {
      capabilities.forEach(capability => {
        if (capability['LT:Options'] === undefined) capability.tunnel = true;else capability['LT:Options'].tunnel = true;
      });
    } else if (typeof capabilities === 'object') {
      if (capabilities['LT:Options'] === undefined) capabilities.tunnel = true;else capabilities['LT:Options'].tunnel = true;
    }

    const obs = new _perf_hooks.PerformanceObserver(list => {
      const entry = list.getEntries()[0];
      log.info(`LambdaTest Tunnel successfully started after ${entry.duration}ms`);
    });
    obs.observe({
      entryTypes: ['measure'],
      buffered: false
    });
    let timer;

    _perf_hooks.performance.mark('ltTunnelStart');

    return Promise.race([new Promise((resolve, reject) => {
      this.lambdatestTunnelProcess.start(tunnelArguments, err => {
        if (err) return reject(err);
        this.lambdatestTunnelProcess.getTunnelName(tunnelName => {
          if (Array.isArray(capabilities)) {
            capabilities.forEach(capability => {
              if (capability['LT:Options'] === undefined) capability.tunnelName = tunnelName;else capability['LT:Options'].tunnelName = tunnelName;
            });
          } else if (typeof capabilities === 'object') {
            if (capabilities['LT:Options'] === undefined) capabilities.tunnelName = tunnelName;else capabilities['LT:Options'].tunnelName = tunnelName;
          }

          resolve();
        });
      });
    }), new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        reject(new Error(_constants.TUNNEL_START_FAILED));
      }, _constants.TUNNEL_STOP_TIMEOUT);
    })]).then(result => {
      clearTimeout(timer);

      _perf_hooks.performance.mark('ltTunnelEnd');

      _perf_hooks.performance.measure('bootTime', 'ltTunnelStart', 'ltTunnelEnd');

      return Promise.resolve(result);
    }, err => {
      clearTimeout(timer);
      return Promise.reject(err);
    });
  }

  onComplete() {
    if (!this.lambdatestTunnelProcess || typeof this.lambdatestTunnelProcess.isRunning !== 'function' || !this.lambdatestTunnelProcess.isRunning()) {
      return;
    }

    let timer;
    return Promise.race([new Promise((resolve, reject) => {
      this.lambdatestTunnelProcess.stop(err => {
        if (err) return reject(err);
        resolve();
      });
    }), new Promise((resolve, reject) => {
      timer = setTimeout(() => reject(new Error(_constants.TUNNEL_STOP_FAILED)), _constants.TUNNEL_STOP_TIMEOUT);
    })]).then(() => {
      clearTimeout(timer);
      return Promise.resolve();
    }, err => {
      clearTimeout(timer);
      return Promise.reject(err);
    });
  }

}

exports.default = LambdaTestLauncher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,